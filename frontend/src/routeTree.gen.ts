/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RootRouteImport } from './routes/_root/route'
import { Route as RootIndexImport } from './routes/_root/index'
import { Route as RundownRundownIdImport } from './routes/rundown/$rundownId'
import { Route as RootSettingsImport } from './routes/_root/settings'
import { Route as RundownRundownIdIndexImport } from './routes/rundown/$rundownId/index'
import { Route as RootSettingsIndexImport } from './routes/_root/settings/index'
import { Route as RootSettingsRundownImport } from './routes/_root/settings/rundown'
import { Route as RootSettingsPieceTypesImport } from './routes/_root/settings/piece-types'
import { Route as RootSettingsConnectionImport } from './routes/_root/settings/connection'
import { Route as RundownRundownIdSegmentSegmentIdIndexImport } from './routes/rundown/$rundownId/segment/$segmentId/index'
import { Route as RundownRundownIdSegmentSegmentIdPartPartIdIndexImport } from './routes/rundown/$rundownId/segment/$segmentId/part/$partId/index'
import { Route as RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdImport } from './routes/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId'

// Create/Update Routes

const RootRouteRoute = RootRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRoute,
} as any)

const RootIndexRoute = RootIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RundownRundownIdRoute = RundownRundownIdImport.update({
  id: '/rundown/$rundownId',
  path: '/rundown/$rundownId',
  getParentRoute: () => rootRoute,
} as any)

const RootSettingsRoute = RootSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => RootRouteRoute,
} as any)

const RundownRundownIdIndexRoute = RundownRundownIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RundownRundownIdRoute,
} as any)

const RootSettingsIndexRoute = RootSettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootSettingsRoute,
} as any)

const RootSettingsRundownRoute = RootSettingsRundownImport.update({
  id: '/rundown',
  path: '/rundown',
  getParentRoute: () => RootSettingsRoute,
} as any)

const RootSettingsPieceTypesRoute = RootSettingsPieceTypesImport.update({
  id: '/piece-types',
  path: '/piece-types',
  getParentRoute: () => RootSettingsRoute,
} as any)

const RootSettingsConnectionRoute = RootSettingsConnectionImport.update({
  id: '/connection',
  path: '/connection',
  getParentRoute: () => RootSettingsRoute,
} as any)

const RundownRundownIdSegmentSegmentIdIndexRoute =
  RundownRundownIdSegmentSegmentIdIndexImport.update({
    id: '/segment/$segmentId/',
    path: '/segment/$segmentId/',
    getParentRoute: () => RundownRundownIdRoute,
  } as any)

const RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute =
  RundownRundownIdSegmentSegmentIdPartPartIdIndexImport.update({
    id: '/segment/$segmentId/part/$partId/',
    path: '/segment/$segmentId/part/$partId/',
    getParentRoute: () => RundownRundownIdRoute,
  } as any)

const RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute =
  RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdImport.update({
    id: '/segment/$segmentId/part/$partId/piece/$pieceId',
    path: '/segment/$segmentId/part/$partId/piece/$pieceId',
    getParentRoute: () => RundownRundownIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRoute
    }
    '/_root/settings': {
      id: '/_root/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof RootSettingsImport
      parentRoute: typeof RootRouteImport
    }
    '/rundown/$rundownId': {
      id: '/rundown/$rundownId'
      path: '/rundown/$rundownId'
      fullPath: '/rundown/$rundownId'
      preLoaderRoute: typeof RundownRundownIdImport
      parentRoute: typeof rootRoute
    }
    '/_root/': {
      id: '/_root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RootIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/settings/connection': {
      id: '/_root/settings/connection'
      path: '/connection'
      fullPath: '/settings/connection'
      preLoaderRoute: typeof RootSettingsConnectionImport
      parentRoute: typeof RootSettingsImport
    }
    '/_root/settings/piece-types': {
      id: '/_root/settings/piece-types'
      path: '/piece-types'
      fullPath: '/settings/piece-types'
      preLoaderRoute: typeof RootSettingsPieceTypesImport
      parentRoute: typeof RootSettingsImport
    }
    '/_root/settings/rundown': {
      id: '/_root/settings/rundown'
      path: '/rundown'
      fullPath: '/settings/rundown'
      preLoaderRoute: typeof RootSettingsRundownImport
      parentRoute: typeof RootSettingsImport
    }
    '/_root/settings/': {
      id: '/_root/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof RootSettingsIndexImport
      parentRoute: typeof RootSettingsImport
    }
    '/rundown/$rundownId/': {
      id: '/rundown/$rundownId/'
      path: '/'
      fullPath: '/rundown/$rundownId/'
      preLoaderRoute: typeof RundownRundownIdIndexImport
      parentRoute: typeof RundownRundownIdImport
    }
    '/rundown/$rundownId/segment/$segmentId/': {
      id: '/rundown/$rundownId/segment/$segmentId/'
      path: '/segment/$segmentId'
      fullPath: '/rundown/$rundownId/segment/$segmentId'
      preLoaderRoute: typeof RundownRundownIdSegmentSegmentIdIndexImport
      parentRoute: typeof RundownRundownIdImport
    }
    '/rundown/$rundownId/segment/$segmentId/part/$partId/': {
      id: '/rundown/$rundownId/segment/$segmentId/part/$partId/'
      path: '/segment/$segmentId/part/$partId'
      fullPath: '/rundown/$rundownId/segment/$segmentId/part/$partId'
      preLoaderRoute: typeof RundownRundownIdSegmentSegmentIdPartPartIdIndexImport
      parentRoute: typeof RundownRundownIdImport
    }
    '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId': {
      id: '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId'
      path: '/segment/$segmentId/part/$partId/piece/$pieceId'
      fullPath: '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId'
      preLoaderRoute: typeof RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdImport
      parentRoute: typeof RundownRundownIdImport
    }
  }
}

// Create and export the route tree

interface RootSettingsRouteChildren {
  RootSettingsConnectionRoute: typeof RootSettingsConnectionRoute
  RootSettingsPieceTypesRoute: typeof RootSettingsPieceTypesRoute
  RootSettingsRundownRoute: typeof RootSettingsRundownRoute
  RootSettingsIndexRoute: typeof RootSettingsIndexRoute
}

const RootSettingsRouteChildren: RootSettingsRouteChildren = {
  RootSettingsConnectionRoute: RootSettingsConnectionRoute,
  RootSettingsPieceTypesRoute: RootSettingsPieceTypesRoute,
  RootSettingsRundownRoute: RootSettingsRundownRoute,
  RootSettingsIndexRoute: RootSettingsIndexRoute,
}

const RootSettingsRouteWithChildren = RootSettingsRoute._addFileChildren(
  RootSettingsRouteChildren,
)

interface RootRouteRouteChildren {
  RootSettingsRoute: typeof RootSettingsRouteWithChildren
  RootIndexRoute: typeof RootIndexRoute
}

const RootRouteRouteChildren: RootRouteRouteChildren = {
  RootSettingsRoute: RootSettingsRouteWithChildren,
  RootIndexRoute: RootIndexRoute,
}

const RootRouteRouteWithChildren = RootRouteRoute._addFileChildren(
  RootRouteRouteChildren,
)

interface RundownRundownIdRouteChildren {
  RundownRundownIdIndexRoute: typeof RundownRundownIdIndexRoute
  RundownRundownIdSegmentSegmentIdIndexRoute: typeof RundownRundownIdSegmentSegmentIdIndexRoute
  RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute: typeof RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute
  RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute: typeof RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute
}

const RundownRundownIdRouteChildren: RundownRundownIdRouteChildren = {
  RundownRundownIdIndexRoute: RundownRundownIdIndexRoute,
  RundownRundownIdSegmentSegmentIdIndexRoute:
    RundownRundownIdSegmentSegmentIdIndexRoute,
  RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute:
    RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute,
  RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute:
    RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute,
}

const RundownRundownIdRouteWithChildren =
  RundownRundownIdRoute._addFileChildren(RundownRundownIdRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof RootRouteRouteWithChildren
  '/settings': typeof RootSettingsRouteWithChildren
  '/rundown/$rundownId': typeof RundownRundownIdRouteWithChildren
  '/': typeof RootIndexRoute
  '/settings/connection': typeof RootSettingsConnectionRoute
  '/settings/piece-types': typeof RootSettingsPieceTypesRoute
  '/settings/rundown': typeof RootSettingsRundownRoute
  '/settings/': typeof RootSettingsIndexRoute
  '/rundown/$rundownId/': typeof RundownRundownIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId': typeof RundownRundownIdSegmentSegmentIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/part/$partId': typeof RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId': typeof RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute
}

export interface FileRoutesByTo {
  '/': typeof RootIndexRoute
  '/settings/connection': typeof RootSettingsConnectionRoute
  '/settings/piece-types': typeof RootSettingsPieceTypesRoute
  '/settings/rundown': typeof RootSettingsRundownRoute
  '/settings': typeof RootSettingsIndexRoute
  '/rundown/$rundownId': typeof RundownRundownIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId': typeof RundownRundownIdSegmentSegmentIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/part/$partId': typeof RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId': typeof RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_root': typeof RootRouteRouteWithChildren
  '/_root/settings': typeof RootSettingsRouteWithChildren
  '/rundown/$rundownId': typeof RundownRundownIdRouteWithChildren
  '/_root/': typeof RootIndexRoute
  '/_root/settings/connection': typeof RootSettingsConnectionRoute
  '/_root/settings/piece-types': typeof RootSettingsPieceTypesRoute
  '/_root/settings/rundown': typeof RootSettingsRundownRoute
  '/_root/settings/': typeof RootSettingsIndexRoute
  '/rundown/$rundownId/': typeof RundownRundownIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/': typeof RundownRundownIdSegmentSegmentIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/part/$partId/': typeof RundownRundownIdSegmentSegmentIdPartPartIdIndexRoute
  '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId': typeof RundownRundownIdSegmentSegmentIdPartPartIdPiecePieceIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/settings'
    | '/rundown/$rundownId'
    | '/'
    | '/settings/connection'
    | '/settings/piece-types'
    | '/settings/rundown'
    | '/settings/'
    | '/rundown/$rundownId/'
    | '/rundown/$rundownId/segment/$segmentId'
    | '/rundown/$rundownId/segment/$segmentId/part/$partId'
    | '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings/connection'
    | '/settings/piece-types'
    | '/settings/rundown'
    | '/settings'
    | '/rundown/$rundownId'
    | '/rundown/$rundownId/segment/$segmentId'
    | '/rundown/$rundownId/segment/$segmentId/part/$partId'
    | '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId'
  id:
    | '__root__'
    | '/_root'
    | '/_root/settings'
    | '/rundown/$rundownId'
    | '/_root/'
    | '/_root/settings/connection'
    | '/_root/settings/piece-types'
    | '/_root/settings/rundown'
    | '/_root/settings/'
    | '/rundown/$rundownId/'
    | '/rundown/$rundownId/segment/$segmentId/'
    | '/rundown/$rundownId/segment/$segmentId/part/$partId/'
    | '/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RootRouteRoute: typeof RootRouteRouteWithChildren
  RundownRundownIdRoute: typeof RundownRundownIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  RootRouteRoute: RootRouteRouteWithChildren,
  RundownRundownIdRoute: RundownRundownIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_root",
        "/rundown/$rundownId"
      ]
    },
    "/_root": {
      "filePath": "_root/route.tsx",
      "children": [
        "/_root/settings",
        "/_root/"
      ]
    },
    "/_root/settings": {
      "filePath": "_root/settings.tsx",
      "parent": "/_root",
      "children": [
        "/_root/settings/connection",
        "/_root/settings/piece-types",
        "/_root/settings/rundown",
        "/_root/settings/"
      ]
    },
    "/rundown/$rundownId": {
      "filePath": "rundown/$rundownId.tsx",
      "children": [
        "/rundown/$rundownId/",
        "/rundown/$rundownId/segment/$segmentId/",
        "/rundown/$rundownId/segment/$segmentId/part/$partId/",
        "/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId"
      ]
    },
    "/_root/": {
      "filePath": "_root/index.tsx",
      "parent": "/_root"
    },
    "/_root/settings/connection": {
      "filePath": "_root/settings/connection.tsx",
      "parent": "/_root/settings"
    },
    "/_root/settings/piece-types": {
      "filePath": "_root/settings/piece-types.tsx",
      "parent": "/_root/settings"
    },
    "/_root/settings/rundown": {
      "filePath": "_root/settings/rundown.tsx",
      "parent": "/_root/settings"
    },
    "/_root/settings/": {
      "filePath": "_root/settings/index.tsx",
      "parent": "/_root/settings"
    },
    "/rundown/$rundownId/": {
      "filePath": "rundown/$rundownId/index.tsx",
      "parent": "/rundown/$rundownId"
    },
    "/rundown/$rundownId/segment/$segmentId/": {
      "filePath": "rundown/$rundownId/segment/$segmentId/index.tsx",
      "parent": "/rundown/$rundownId"
    },
    "/rundown/$rundownId/segment/$segmentId/part/$partId/": {
      "filePath": "rundown/$rundownId/segment/$segmentId/part/$partId/index.tsx",
      "parent": "/rundown/$rundownId"
    },
    "/rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId": {
      "filePath": "rundown/$rundownId/segment/$segmentId/part/$partId/piece/$pieceId.tsx",
      "parent": "/rundown/$rundownId"
    }
  }
}
ROUTE_MANIFEST_END */
